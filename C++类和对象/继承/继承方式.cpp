#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
using namespace std;

////父类的私有权限无论哪种继承方式都无法访问
//
////三种继承方式：
////1.公共继承
////继承来的东西的权限不变
////2.保护继承
////继承来的东西变为保护权限
////3.私有继承
////继承来的东西变为私有权限
//class Base1
//{
//public:
//	int m_a;
//protected:
//	int m_b;
//private:
//	int m_c;
//};
////公共继承：继承来的东西的权限不变
//class Son1 :public Base1
//{
//public:
//	void func()
//	{
//		m_a = 10;//父类中的公共成员在子类中也是公共权限
//		m_b = 10;//父类中的保护成员在子类中也是保护权限
//		//m_c = 10;//父类的私有权限在子类中访问不到
//	}
//
//};
//void test01()
//{
//	Son1 s1;
//	s1.m_a = 100;
//	//s1.m_b = 100;//父类中的保护成员在子类中是保护权限,类外访问不到
//}
////保护继承
//class Son2 :protected Base1
//{
//public:
//	void func()
//	{
//		m_a = 100;//父类的公共成员在子类中变成保护权限
//		m_b = 100;//父类的保护成员在子类中变成保护权限
//		//m_c = 100;//父类的私有权限在子类中访问不到
//	}
//};
//void test02()
//{
//	Son2 s2;
//	//s2.m_a = 100;//父类的公共成员在子类中变成保护权限,类外访问不到
//	//s2.m_b = 100;//父类的保护成员在子类中变成保护权限,类外访问不到
//}
////私有继承
//class Son3 :private Base1
//{
//public:
//	void func()
//	{
//		m_a = 1000;//父类的公共成员在子类中变成私有权限
//		m_b = 1000;//父类的保护成员在子类中变成私有权限
//		//m_c = 1000;//父类的私有权限在子类中访问不到
//	}
//};
//class GrandSon :public Son3
//{
//public:
//	void func()
//	{
//		//m_a = 10000;//父类的公共成员在子类中变成私有权限，子类的子类访问不到
//		//m_b = 10000;//父类的保护成员在子类中变成私有权限，子类的子类访问不到
//	}
//};
//
//void test03()
//{
//	Son3 s3;
//	//s3.m_a = 1000;//父类的公共成员在子类中变成私有权限,类外访问不到
//	//s3.m_b = 1000;//父类的保护成员在子类中变成私有权限,类外访问不到
//}
//
//
//int main()
//{
//	return 0;
//}
